---
---
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Draw and Predict</title>
</head>
<body>
    <h1>Draw an Image</h1>
    <!-- Canvas Element for Drawing -->
    <canvas id="canvas" width="28" height="28" style="border: none;"></canvas>
    <br>
    <button id="clear-btn">Clear</button>
    <button id="predict-btn">Predict</button>
    <p id="result"></p>

    <script>
        // JavaScript to handle drawing on the canvas
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        ctx.rect(0, 0, canvas.width, canvas.height);
        ctx.fillStyle = "black";
        ctx.fill();

        let drawing = false;
        let started = false;

        // Set up the canvas for drawing
        canvas.addEventListener('mousedown', () => drawing = true);
        canvas.addEventListener('mouseup', () => {
            drawing = false
            started = false;
        });
        canvas.addEventListener('mousemove', draw);

        function draw(event) {
            if (!drawing) return;

            ctx.lineWidth = 1;
            ctx.lineCap = 'round';
            ctx.strokeStyle = 'white';

            if(!started)
            {
                started = true;
                ctx.beginPath();
                ctx.moveTo(event.offsetX, event.offsetY);
            }
            else
            {
                ctx.lineTo(event.offsetX, event.offsetY);
                ctx.stroke();
                ctx.beginPath();
                ctx.moveTo(event.offsetX, event.offsetY);
            }
        }

        // Clear canvas
        document.getElementById('clear-btn').addEventListener('click', () => {
            ctx.rect(0, 0, canvas.width, canvas.height);
            ctx.fillStyle = "black";
            ctx.fill();
            started = false;
        });

        // Function to send image data to the server
        document.getElementById('predict-btn').addEventListener('click', async () => {
            // Convert canvas drawing to a data URL (base64 image)

            const dataURL = canvas.toDataURL('image/jpg', 1.0);

            try {
                const response = await fetch('https://flask-server-3enq.onrender.com/predict', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ image: dataURL })
                });

                const result = await response.json();
                document.getElementById('result').innerText = `Prediction: ${result.prediction}`;
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
    <script src="https://cdn.jsdelivr.net/npm/onnxjs/dist/onnx.min.js"></script>
	<script src="../onnx.js" />
</body>
</html>
